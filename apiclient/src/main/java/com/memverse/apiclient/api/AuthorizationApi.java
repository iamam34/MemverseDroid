/*
 * Swagger Memverse
 * Memverse API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.memverse.apiclient.api;

import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.memverse.apiclient.ApiCallback;
import com.memverse.apiclient.ApiClient;
import com.memverse.apiclient.ApiException;
import com.memverse.apiclient.ApiResponse;
import com.memverse.apiclient.Configuration;
import com.memverse.apiclient.MemverseApiConstants;
import com.memverse.apiclient.Pair;
import com.memverse.apiclient.ProgressRequestBody;
import com.memverse.apiclient.ProgressResponseBody;
import com.memverse.apiclient.model.AccessToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationApi {
    private ApiClient apiClient;

    public AuthorizationApi() {
        this(Configuration.getDefaultApiClient());

        this.apiClient.setBasePath("https://www.memverse.com");
        this.apiClient.setUsername(MemverseApiConstants.CLIENT_ID);
        this.apiClient.setPassword(MemverseApiConstants.CLIENT_SECRET);
    }

    public AuthorizationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    class RequestAccessTokenBody {

        @SerializedName("username")
        public final String username;

        @SerializedName("password")
        public final String password;

        @SerializedName("grant_type")
        public final String grantType;

        @SerializedName("client_id")
        public final String clientId;

        RequestAccessTokenBody(String username, String password, String grantType, String clientId) {
            this.username = username;
            this.password = password;
            this.grantType = grantType;
            this.clientId = clientId;
        }
    }

    /**
     * Build call for requestAccessToken
     *
     * @param grantType               Password flow is best option for supporting a mobile app (required)
     * @param username                User name on Memverse.com (email address) (required)
     * @param password                User password on Memverse.com (required)
     * @param clientId                Contact admin@memverse.com to get a client_id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestAccessTokenCall(String grantType, String username, String password, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new RequestAccessTokenBody(username, password, grantType, clientId);

        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestAccessTokenValidateBeforeCall(String grantType, String username, String password, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling requestAccessToken(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling requestAccessToken(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling requestAccessToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling requestAccessToken(Async)");
        }


        com.squareup.okhttp.Call call = requestAccessTokenCall(grantType, username, password, clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request an API access token. This access token should be used for all future requests as per the Oauth2 Password Flow.
     *
     * @param grantType Password flow is best option for supporting a mobile app (required)
     * @param username  User name on Memverse.com (email address) (required)
     * @param password  User password on Memverse.com (required)
     * @param clientId  Contact admin@memverse.com to get a client_id (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessToken requestAccessToken(String grantType, String username, String password, String clientId) throws ApiException {
        ApiResponse<AccessToken> resp = requestAccessTokenWithHttpInfo(grantType, username, password, clientId);
        return resp.getData();
    }

    /**
     * Request an API access token. This access token should be used for all future requests as per the Oauth2 Password Flow.
     *
     * @param grantType Password flow is best option for supporting a mobile app (required)
     * @param username  User name on Memverse.com (email address) (required)
     * @param password  User password on Memverse.com (required)
     * @param clientId  Contact admin@memverse.com to get a client_id (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessToken> requestAccessTokenWithHttpInfo(String grantType, String username, String password, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = requestAccessTokenValidateBeforeCall(grantType, username, password, clientId, null, null);
        Type localVarReturnType = new TypeToken<AccessToken>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Request an API access token. This access token should be used for all future requests as per the Oauth2 Password Flow.
     *
     * @param grantType Password flow is best option for supporting a mobile app (required)
     * @param username  User name on Memverse.com (email address) (required)
     * @param password  User password on Memverse.com (required)
     * @param clientId  Contact admin@memverse.com to get a client_id (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestAccessTokenAsync(String grantType, String username, String password, String clientId, final ApiCallback<AccessToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestAccessTokenValidateBeforeCall(grantType, username, password, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessToken>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
