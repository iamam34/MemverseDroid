/*
 * Swagger Memverse
 * Memverse API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.memverse.apiclient.api;

import com.google.gson.reflect.TypeToken;
import com.memverse.apiclient.ApiCallback;
import com.memverse.apiclient.ApiClient;
import com.memverse.apiclient.ApiException;
import com.memverse.apiclient.ApiResponse;
import com.memverse.apiclient.Configuration;
import com.memverse.apiclient.Pair;
import com.memverse.apiclient.ProgressRequestBody;
import com.memverse.apiclient.ProgressResponseBody;
import com.memverse.apiclient.model.Verse;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerseApi {
    private ApiClient apiClient;

    public VerseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for findChapter
     *
     * @param tl                      Bible translation of required verse (required)
     * @param bk                      Book (required)
     * @param ch                      Chapter (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findChapterCall(String tl, String bk, String ch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verses/chapter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tl != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("tl", tl));
        if (bk != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("bk", bk));
        if (ch != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("ch", ch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findChapterValidateBeforeCall(String tl, String bk, String ch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'tl' is set
        if (tl == null) {
            throw new ApiException("Missing the required parameter 'tl' when calling findChapter(Async)");
        }

        // verify the required parameter 'bk' is set
        if (bk == null) {
            throw new ApiException("Missing the required parameter 'bk' when calling findChapter(Async)");
        }

        // verify the required parameter 'ch' is set
        if (ch == null) {
            throw new ApiException("Missing the required parameter 'ch' when calling findChapter(Async)");
        }


        com.squareup.okhttp.Call call = findChapterCall(tl, bk, ch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lookup a chapter by translation, book, and chapter number
     *
     * @param tl Bible translation of required verse (required)
     * @param bk Book (required)
     * @param ch Chapter (required)
     * @return Verse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verse findChapter(String tl, String bk, String ch) throws ApiException {
        ApiResponse<Verse> resp = findChapterWithHttpInfo(tl, bk, ch);
        return resp.getData();
    }

    /**
     * Lookup a chapter by translation, book, and chapter number
     *
     * @param tl Bible translation of required verse (required)
     * @param bk Book (required)
     * @param ch Chapter (required)
     * @return ApiResponse&lt;Verse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verse> findChapterWithHttpInfo(String tl, String bk, String ch) throws ApiException {
        com.squareup.okhttp.Call call = findChapterValidateBeforeCall(tl, bk, ch, null, null);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Lookup a chapter by translation, book, and chapter number
     *
     * @param tl       Bible translation of required verse (required)
     * @param bk       Book (required)
     * @param ch       Chapter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findChapterAsync(String tl, String bk, String ch, final ApiCallback<Verse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findChapterValidateBeforeCall(tl, bk, ch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for findVerseById
     *
     * @param id                      ID of verse to fetch (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findVerseByIdCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verses/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findVerseByIdValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findVerseById(Async)");
        }


        com.squareup.okhttp.Call call = findVerseByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a single verse
     *
     * @param id ID of verse to fetch (required)
     * @return Verse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verse findVerseById(Long id) throws ApiException {
        ApiResponse<Verse> resp = findVerseByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Returns a single verse
     *
     * @param id ID of verse to fetch (required)
     * @return ApiResponse&lt;Verse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verse> findVerseByIdWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = findVerseByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Returns a single verse
     *
     * @param id       ID of verse to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findVerseByIdAsync(Long id, final ApiCallback<Verse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findVerseByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for findVerseBySearchTerm
     *
     * @param searchParams            Search term expected in text of verse (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findVerseBySearchTermCall(String searchParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verses/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchParams != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("searchParams", searchParams));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findVerseBySearchTermValidateBeforeCall(String searchParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'searchParams' is set
        if (searchParams == null) {
            throw new ApiException("Missing the required parameter 'searchParams' when calling findVerseBySearchTerm(Async)");
        }


        com.squareup.okhttp.Call call = findVerseBySearchTermCall(searchParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for a verse
     *
     * @param searchParams Search term expected in text of verse (required)
     * @return Verse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verse findVerseBySearchTerm(String searchParams) throws ApiException {
        ApiResponse<Verse> resp = findVerseBySearchTermWithHttpInfo(searchParams);
        return resp.getData();
    }

    /**
     * Search for a verse
     *
     * @param searchParams Search term expected in text of verse (required)
     * @return ApiResponse&lt;Verse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verse> findVerseBySearchTermWithHttpInfo(String searchParams) throws ApiException {
        com.squareup.okhttp.Call call = findVerseBySearchTermValidateBeforeCall(searchParams, null, null);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Search for a verse
     *
     * @param searchParams Search term expected in text of verse (required)
     * @param callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findVerseBySearchTermAsync(String searchParams, final ApiCallback<Verse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findVerseBySearchTermValidateBeforeCall(searchParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for findVerseByTlBkChVs
     *
     * @param tl                      Bible translation of required verse (required)
     * @param bk                      Book (required)
     * @param ch                      Chapter (required)
     * @param vs                      Verse number (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findVerseByTlBkChVsCall(String tl, String bk, String ch, String vs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verses/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tl != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("tl", tl));
        if (bk != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("bk", bk));
        if (ch != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("ch", ch));
        if (vs != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("vs", vs));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findVerseByTlBkChVsValidateBeforeCall(String tl, String bk, String ch, String vs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'tl' is set
        if (tl == null) {
            throw new ApiException("Missing the required parameter 'tl' when calling findVerseByTlBkChVs(Async)");
        }

        // verify the required parameter 'bk' is set
        if (bk == null) {
            throw new ApiException("Missing the required parameter 'bk' when calling findVerseByTlBkChVs(Async)");
        }

        // verify the required parameter 'ch' is set
        if (ch == null) {
            throw new ApiException("Missing the required parameter 'ch' when calling findVerseByTlBkChVs(Async)");
        }

        // verify the required parameter 'vs' is set
        if (vs == null) {
            throw new ApiException("Missing the required parameter 'vs' when calling findVerseByTlBkChVs(Async)");
        }


        com.squareup.okhttp.Call call = findVerseByTlBkChVsCall(tl, bk, ch, vs, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lookup a verse by translation, book, chapter, and verse number
     *
     * @param tl Bible translation of required verse (required)
     * @param bk Book (required)
     * @param ch Chapter (required)
     * @param vs Verse number (required)
     * @return Verse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verse findVerseByTlBkChVs(String tl, String bk, String ch, String vs) throws ApiException {
        ApiResponse<Verse> resp = findVerseByTlBkChVsWithHttpInfo(tl, bk, ch, vs);
        return resp.getData();
    }

    /**
     * Lookup a verse by translation, book, chapter, and verse number
     *
     * @param tl Bible translation of required verse (required)
     * @param bk Book (required)
     * @param ch Chapter (required)
     * @param vs Verse number (required)
     * @return ApiResponse&lt;Verse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verse> findVerseByTlBkChVsWithHttpInfo(String tl, String bk, String ch, String vs) throws ApiException {
        com.squareup.okhttp.Call call = findVerseByTlBkChVsValidateBeforeCall(tl, bk, ch, vs, null, null);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Lookup a verse by translation, book, chapter, and verse number
     *
     * @param tl       Bible translation of required verse (required)
     * @param bk       Book (required)
     * @param ch       Chapter (required)
     * @param vs       Verse number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findVerseByTlBkChVsAsync(String tl, String bk, String ch, String vs, final ApiCallback<Verse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findVerseByTlBkChVsValidateBeforeCall(tl, bk, ch, vs, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
