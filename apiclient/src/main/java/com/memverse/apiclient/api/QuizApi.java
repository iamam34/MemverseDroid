/*
 * Swagger Memverse
 * Memverse API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.memverse.apiclient.api;

import com.google.gson.reflect.TypeToken;
import com.memverse.apiclient.ApiCallback;
import com.memverse.apiclient.ApiClient;
import com.memverse.apiclient.ApiException;
import com.memverse.apiclient.ApiResponse;
import com.memverse.apiclient.Configuration;
import com.memverse.apiclient.Pair;
import com.memverse.apiclient.ProgressRequestBody;
import com.memverse.apiclient.ProgressResponseBody;
import com.memverse.apiclient.model.Quiz;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuizApi extends BaseApi {
    public QuizApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuizApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for findUpcomingQuiz
     *
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findUpcomingQuizCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quizzes/upcoming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findUpcomingQuizValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = findUpcomingQuizCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the upcoming live quiz
     *
     * @return Quiz
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Quiz findUpcomingQuiz() throws ApiException {
        ApiResponse<Quiz> resp = findUpcomingQuizWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns the upcoming live quiz
     *
     * @return ApiResponse&lt;Quiz&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Quiz> findUpcomingQuizWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = findUpcomingQuizValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Quiz>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Returns the upcoming live quiz
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUpcomingQuizAsync(final ApiCallback<Quiz> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUpcomingQuizValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Quiz>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for recordUserScore
     *
     * @param usrId                   Memverse user ID (required)
     * @param usrName                 Memverse user name (required)
     * @param usrLogin                Memverse user login (email address) (required)
     * @param questionId              Quiz question ID (primary key) (required)
     * @param questionNum             Quiz question number (required)
     * @param score                   The user score (max&#x3D;10) (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recordUserScoreCall(String usrId, String usrName, String usrLogin, Long questionId, Long questionNum, Long score, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/record_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (usrId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("usr_id", usrId));
        if (usrName != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("usr_name", usrName));
        if (usrLogin != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("usr_login", usrLogin));
        if (questionId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("question_id", questionId));
        if (questionNum != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("question_num", questionNum));
        if (score != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("score", score));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"oauth2"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recordUserScoreValidateBeforeCall(String usrId, String usrName, String usrLogin, Long questionId, Long questionNum, Long score, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'usrId' is set
        if (usrId == null) {
            throw new ApiException("Missing the required parameter 'usrId' when calling recordUserScore(Async)");
        }

        // verify the required parameter 'usrName' is set
        if (usrName == null) {
            throw new ApiException("Missing the required parameter 'usrName' when calling recordUserScore(Async)");
        }

        // verify the required parameter 'usrLogin' is set
        if (usrLogin == null) {
            throw new ApiException("Missing the required parameter 'usrLogin' when calling recordUserScore(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling recordUserScore(Async)");
        }

        // verify the required parameter 'questionNum' is set
        if (questionNum == null) {
            throw new ApiException("Missing the required parameter 'questionNum' when calling recordUserScore(Async)");
        }

        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling recordUserScore(Async)");
        }


        com.squareup.okhttp.Call call = recordUserScoreCall(usrId, usrName, usrLogin, questionId, questionNum, score, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Record a user score for a live quiz question
     *
     * @param usrId       Memverse user ID (required)
     * @param usrName     Memverse user name (required)
     * @param usrLogin    Memverse user login (email address) (required)
     * @param questionId  Quiz question ID (primary key) (required)
     * @param questionNum Quiz question number (required)
     * @param score       The user score (max&#x3D;10) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void recordUserScore(String usrId, String usrName, String usrLogin, Long questionId, Long questionNum, Long score) throws ApiException {
        recordUserScoreWithHttpInfo(usrId, usrName, usrLogin, questionId, questionNum, score);
    }

    /**
     * Record a user score for a live quiz question
     *
     * @param usrId       Memverse user ID (required)
     * @param usrName     Memverse user name (required)
     * @param usrLogin    Memverse user login (email address) (required)
     * @param questionId  Quiz question ID (primary key) (required)
     * @param questionNum Quiz question number (required)
     * @param score       The user score (max&#x3D;10) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> recordUserScoreWithHttpInfo(String usrId, String usrName, String usrLogin, Long questionId, Long questionNum, Long score) throws ApiException {
        com.squareup.okhttp.Call call = recordUserScoreValidateBeforeCall(usrId, usrName, usrLogin, questionId, questionNum, score, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously)
     * Record a user score for a live quiz question
     *
     * @param usrId       Memverse user ID (required)
     * @param usrName     Memverse user name (required)
     * @param usrLogin    Memverse user login (email address) (required)
     * @param questionId  Quiz question ID (primary key) (required)
     * @param questionNum Quiz question number (required)
     * @param score       The user score (max&#x3D;10) (required)
     * @param callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recordUserScoreAsync(String usrId, String usrName, String usrLogin, Long questionId, Long questionNum, Long score, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recordUserScoreValidateBeforeCall(usrId, usrName, usrLogin, questionId, questionNum, score, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
