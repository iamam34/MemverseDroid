/*
 * Swagger Memverse
 * Memverse API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.memverse.apiclient.api;

import com.memverse.apiclient.ApiException;
import com.memverse.apiclient.model.Memverse;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

import static com.memverse.apiclient.CustomMatchers.hasId;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.everyItem;
import static org.hamcrest.CoreMatchers.hasItem;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

/**
 * API tests for MemverseApi
 */
public class MemverseApiTest extends BaseApiTest {

    private final MemverseApi api = new MemverseApi();

    @Before
    public void setup() throws ApiException {
        configureAuthentication(api);
    }

    /**
     * Creates a new memory verse
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMemverseTest() throws ApiException {
        Long verseId = 1328970L;
        List<Memverse> response = api.createMemverse(verseId);

        assertNotNull(response);
        assertThat(response, hasItem(hasId(equalTo(verseId))));
    }


    /**
     * Delete a memory verse
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemverseByIdTest() throws ApiException {
        Long id = 1L;
        Memverse response = api.deleteMemverseById(id);

        assertNotNull(response);
    }

    /**
     * Returns a single memory verse
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMemverseByIdTest() throws ApiException {
        Long memverseId = 1768886L;
        Memverse response = api.findMemverseById(memverseId);

        assertNotNull(response);
        assertEquals(memverseId, response.getId());
        assertNotNull(response.getVerse());
        assertNotNull(response.getVerse().getId());
    }

    /**
     * Returns memory verses for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showMemversesTest() throws ApiException {
        String sort = null;
        Long page = null;
        List<Memverse> response = api.showMemverses(sort, page);

        assertNotNull(response);
        assertThat(response, everyItem(hasId(notNullValue(Long.class))));
        Memverse memverse = response.get(0);
        assertNotNull(memverse.getVerse());
        assertNotNull(memverse.getVerse().getId());
    }

    /**
     * Returns memory verses for a given passage
     *
     * @throws ApiException if the Api call fails
     */
    @Ignore
    @Test
    public void showMemversesForPassageTest() throws ApiException {
        Long passageId = null;
        Long page = null;
        Memverse response = api.showMemversesForPassage(passageId, page);

        // TODO: test validations
    }

    /**
     * Record a rating for a memory verse
     *
     * @throws ApiException if the Api call fails
     */
    @Ignore
    @Test
    public void updateMemverseByIdTest() throws ApiException {
        Long id = null;
        Long q = null;
        Memverse response = api.updateMemverseById(id, q);

        // TODO: test validations
    }

}
